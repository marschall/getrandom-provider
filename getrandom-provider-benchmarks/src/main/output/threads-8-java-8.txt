# JMH version: 1.19
# VM version: JDK 1.8.0_152, VM 25.152-b16
# VM invoker: /home/marschall/bin/java/jdk1.8.0_152/jre/bin/java
# VM options: -XX:+UseParallelGC -Xmx32g -Xms32g -Djava.security.properties=src/main/resources/jvm.java8.security -Djava.library.path=/home/marschall/git/getrandom-provider/getrandom-provider-benchmarks/target
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.getrandom.benchmarks.SecureRandomBenchmark.nextBoolean
# Parameters: (algorithm = geturandom)

# Run progress: 0.00% complete, ETA 00:08:00
# Fork: 1 of 3
# Warmup Iteration   1: 1605.312 ops/ms
# Warmup Iteration   2: 1599.730 ops/ms
# Warmup Iteration   3: 1601.797 ops/ms
# Warmup Iteration   4: 1601.474 ops/ms
# Warmup Iteration   5: 1598.123 ops/ms
Iteration   1: 1597.403 ops/ms
Iteration   2: 1600.216 ops/ms
Iteration   3: 1599.185 ops/ms
Iteration   4: 1601.032 ops/ms
Iteration   5: 1601.319 ops/ms

# Run progress: 2.08% complete, ETA 00:08:12
# Fork: 2 of 3
# Warmup Iteration   1: 1583.852 ops/ms
# Warmup Iteration   2: 1589.434 ops/ms
# Warmup Iteration   3: 1581.166 ops/ms
# Warmup Iteration   4: 1583.109 ops/ms
# Warmup Iteration   5: 1586.383 ops/ms
Iteration   1: 1583.017 ops/ms
Iteration   2: 1586.705 ops/ms
Iteration   3: 1580.295 ops/ms
Iteration   4: 1578.411 ops/ms
Iteration   5: 1587.419 ops/ms

# Run progress: 4.17% complete, ETA 00:08:00
# Fork: 3 of 3
# Warmup Iteration   1: 1597.306 ops/ms
# Warmup Iteration   2: 1593.971 ops/ms
# Warmup Iteration   3: 1594.341 ops/ms
# Warmup Iteration   4: 1597.025 ops/ms
# Warmup Iteration   5: 1595.341 ops/ms
Iteration   1: 1594.648 ops/ms
Iteration   2: 1597.185 ops/ms
Iteration   3: 1595.356 ops/ms
Iteration   4: 1597.096 ops/ms
Iteration   5: 1596.758 ops/ms


Result "com.github.marschall.getrandom.benchmarks.SecureRandomBenchmark.nextBoolean":
  1593.070 ±(99.9%) 8.304 ops/ms [Average]
  (min, avg, max) = (1578.411, 1593.070, 1601.319), stdev = 7.768
  CI (99.9%): [1584.766, 1601.374] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_152, VM 25.152-b16
# VM invoker: /home/marschall/bin/java/jdk1.8.0_152/jre/bin/java
# VM options: -XX:+UseParallelGC -Xmx32g -Xms32g -Djava.security.properties=src/main/resources/jvm.java8.security -Djava.library.path=/home/marschall/git/getrandom-provider/getrandom-provider-benchmarks/target
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.getrandom.benchmarks.SecureRandomBenchmark.nextBoolean
# Parameters: (algorithm = NativePRNGNonBlocking)

# Run progress: 6.25% complete, ETA 00:07:49
# Fork: 1 of 3
# Warmup Iteration   1: 3540.981 ops/ms
# Warmup Iteration   2: 3609.090 ops/ms
# Warmup Iteration   3: 3603.625 ops/ms
# Warmup Iteration   4: 3609.984 ops/ms
# Warmup Iteration   5: 3670.929 ops/ms
Iteration   1: 3645.060 ops/ms
Iteration   2: 3636.794 ops/ms
Iteration   3: 3681.434 ops/ms
Iteration   4: 3675.195 ops/ms
Iteration   5: 3640.751 ops/ms

# Run progress: 8.33% complete, ETA 00:07:38
# Fork: 2 of 3
# Warmup Iteration   1: 3728.420 ops/ms
# Warmup Iteration   2: 3761.608 ops/ms
# Warmup Iteration   3: 3765.424 ops/ms
# Warmup Iteration   4: 3792.411 ops/ms
# Warmup Iteration   5: 3746.111 ops/ms
Iteration   1: 3784.110 ops/ms
Iteration   2: 3752.247 ops/ms
Iteration   3: 3771.428 ops/ms
Iteration   4: 3701.564 ops/ms
Iteration   5: 3674.072 ops/ms

# Run progress: 10.42% complete, ETA 00:07:27
# Fork: 3 of 3
# Warmup Iteration   1: 3643.003 ops/ms
# Warmup Iteration   2: 3799.808 ops/ms
# Warmup Iteration   3: 3757.955 ops/ms
# Warmup Iteration   4: 3758.717 ops/ms
# Warmup Iteration   5: 3802.967 ops/ms
Iteration   1: 3780.565 ops/ms
Iteration   2: 3770.129 ops/ms
Iteration   3: 3707.376 ops/ms
Iteration   4: 3719.207 ops/ms
Iteration   5: 3677.243 ops/ms


Result "com.github.marschall.getrandom.benchmarks.SecureRandomBenchmark.nextBoolean":
  3707.812 ±(99.9%) 56.061 ops/ms [Average]
  (min, avg, max) = (3636.794, 3707.812, 3784.110), stdev = 52.440
  CI (99.9%): [3651.750, 3763.873] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_152, VM 25.152-b16
# VM invoker: /home/marschall/bin/java/jdk1.8.0_152/jre/bin/java
# VM options: -XX:+UseParallelGC -Xmx32g -Xms32g -Djava.security.properties=src/main/resources/jvm.java8.security -Djava.library.path=/home/marschall/git/getrandom-provider/getrandom-provider-benchmarks/target
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.getrandom.benchmarks.SecureRandomBenchmark.nextBytes128
# Parameters: (algorithm = geturandom)

# Run progress: 12.50% complete, ETA 00:07:16
# Fork: 1 of 3
# Warmup Iteration   1: 658.552 ops/ms
# Warmup Iteration   2: 659.915 ops/ms
# Warmup Iteration   3: 654.319 ops/ms
# Warmup Iteration   4: 656.283 ops/ms
# Warmup Iteration   5: 655.475 ops/ms
Iteration   1: 656.430 ops/ms
Iteration   2: 657.231 ops/ms
Iteration   3: 655.870 ops/ms
Iteration   4: 657.956 ops/ms
Iteration   5: 657.266 ops/ms

# Run progress: 14.58% complete, ETA 00:07:06
# Fork: 2 of 3
# Warmup Iteration   1: 658.211 ops/ms
# Warmup Iteration   2: 658.856 ops/ms
# Warmup Iteration   3: 654.152 ops/ms
# Warmup Iteration   4: 658.131 ops/ms
# Warmup Iteration   5: 655.604 ops/ms
Iteration   1: 656.711 ops/ms
Iteration   2: 656.140 ops/ms
Iteration   3: 656.798 ops/ms
Iteration   4: 657.066 ops/ms
Iteration   5: 656.656 ops/ms

# Run progress: 16.67% complete, ETA 00:06:55
# Fork: 3 of 3
# Warmup Iteration   1: 658.701 ops/ms
# Warmup Iteration   2: 658.133 ops/ms
# Warmup Iteration   3: 658.395 ops/ms
# Warmup Iteration   4: 654.568 ops/ms
# Warmup Iteration   5: 656.729 ops/ms
Iteration   1: 656.817 ops/ms
Iteration   2: 656.486 ops/ms
Iteration   3: 657.910 ops/ms
Iteration   4: 655.913 ops/ms
Iteration   5: 657.080 ops/ms


Result "com.github.marschall.getrandom.benchmarks.SecureRandomBenchmark.nextBytes128":
  656.822 ±(99.9%) 0.668 ops/ms [Average]
  (min, avg, max) = (655.870, 656.822, 657.956), stdev = 0.625
  CI (99.9%): [656.154, 657.490] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_152, VM 25.152-b16
# VM invoker: /home/marschall/bin/java/jdk1.8.0_152/jre/bin/java
# VM options: -XX:+UseParallelGC -Xmx32g -Xms32g -Djava.security.properties=src/main/resources/jvm.java8.security -Djava.library.path=/home/marschall/git/getrandom-provider/getrandom-provider-benchmarks/target
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.getrandom.benchmarks.SecureRandomBenchmark.nextBytes128
# Parameters: (algorithm = NativePRNGNonBlocking)

# Run progress: 18.75% complete, ETA 00:06:45
# Fork: 1 of 3
# Warmup Iteration   1: 247.316 ops/ms
# Warmup Iteration   2: 255.677 ops/ms
# Warmup Iteration   3: 255.122 ops/ms
# Warmup Iteration   4: 253.692 ops/ms
# Warmup Iteration   5: 254.284 ops/ms
Iteration   1: 254.277 ops/ms
Iteration   2: 253.984 ops/ms
Iteration   3: 254.969 ops/ms
Iteration   4: 253.533 ops/ms
Iteration   5: 253.656 ops/ms

# Run progress: 20.83% complete, ETA 00:06:34
# Fork: 2 of 3
# Warmup Iteration   1: 247.026 ops/ms
# Warmup Iteration   2: 252.106 ops/ms
# Warmup Iteration   3: 250.293 ops/ms
# Warmup Iteration   4: 251.358 ops/ms
# Warmup Iteration   5: 252.375 ops/ms
Iteration   1: 253.117 ops/ms
Iteration   2: 252.916 ops/ms
Iteration   3: 252.840 ops/ms
Iteration   4: 251.520 ops/ms
Iteration   5: 252.432 ops/ms

# Run progress: 22.92% complete, ETA 00:06:23
# Fork: 3 of 3
# Warmup Iteration   1: 244.883 ops/ms
# Warmup Iteration   2: 253.529 ops/ms
# Warmup Iteration   3: 251.362 ops/ms
# Warmup Iteration   4: 252.533 ops/ms
# Warmup Iteration   5: 251.453 ops/ms
Iteration   1: 252.479 ops/ms
Iteration   2: 252.210 ops/ms
Iteration   3: 251.995 ops/ms
Iteration   4: 252.010 ops/ms
Iteration   5: 252.833 ops/ms


Result "com.github.marschall.getrandom.benchmarks.SecureRandomBenchmark.nextBytes128":
  252.985 ±(99.9%) 1.017 ops/ms [Average]
  (min, avg, max) = (251.520, 252.985, 254.969), stdev = 0.951
  CI (99.9%): [251.968, 254.001] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_152, VM 25.152-b16
# VM invoker: /home/marschall/bin/java/jdk1.8.0_152/jre/bin/java
# VM options: -XX:+UseParallelGC -Xmx32g -Xms32g -Djava.security.properties=src/main/resources/jvm.java8.security -Djava.library.path=/home/marschall/git/getrandom-provider/getrandom-provider-benchmarks/target
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.getrandom.benchmarks.SecureRandomBenchmark.nextBytes16
# Parameters: (algorithm = geturandom)

# Run progress: 25.00% complete, ETA 00:06:13
# Fork: 1 of 3
# Warmup Iteration   1: 1632.392 ops/ms
# Warmup Iteration   2: 1629.389 ops/ms
# Warmup Iteration   3: 1630.583 ops/ms
# Warmup Iteration   4: 1632.031 ops/ms
# Warmup Iteration   5: 1630.163 ops/ms
Iteration   1: 1633.275 ops/ms
Iteration   2: 1638.156 ops/ms
Iteration   3: 1636.665 ops/ms
Iteration   4: 1634.338 ops/ms
Iteration   5: 1624.344 ops/ms

# Run progress: 27.08% complete, ETA 00:06:02
# Fork: 2 of 3
# Warmup Iteration   1: 1629.318 ops/ms
# Warmup Iteration   2: 1632.196 ops/ms
# Warmup Iteration   3: 1629.307 ops/ms
# Warmup Iteration   4: 1629.925 ops/ms
# Warmup Iteration   5: 1639.105 ops/ms
Iteration   1: 1627.477 ops/ms
Iteration   2: 1632.081 ops/ms
Iteration   3: 1632.359 ops/ms
Iteration   4: 1625.924 ops/ms
Iteration   5: 1624.701 ops/ms

# Run progress: 29.17% complete, ETA 00:05:52
# Fork: 3 of 3
# Warmup Iteration   1: 1636.674 ops/ms
# Warmup Iteration   2: 1625.337 ops/ms
# Warmup Iteration   3: 1625.329 ops/ms
# Warmup Iteration   4: 1634.413 ops/ms
# Warmup Iteration   5: 1633.301 ops/ms
Iteration   1: 1631.827 ops/ms
Iteration   2: 1631.242 ops/ms
Iteration   3: 1626.615 ops/ms
Iteration   4: 1624.705 ops/ms
Iteration   5: 1624.342 ops/ms


Result "com.github.marschall.getrandom.benchmarks.SecureRandomBenchmark.nextBytes16":
  1629.870 ±(99.9%) 5.027 ops/ms [Average]
  (min, avg, max) = (1624.342, 1629.870, 1638.156), stdev = 4.702
  CI (99.9%): [1624.843, 1634.897] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_152, VM 25.152-b16
# VM invoker: /home/marschall/bin/java/jdk1.8.0_152/jre/bin/java
# VM options: -XX:+UseParallelGC -Xmx32g -Xms32g -Djava.security.properties=src/main/resources/jvm.java8.security -Djava.library.path=/home/marschall/git/getrandom-provider/getrandom-provider-benchmarks/target
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.getrandom.benchmarks.SecureRandomBenchmark.nextBytes16
# Parameters: (algorithm = NativePRNGNonBlocking)

# Run progress: 31.25% complete, ETA 00:05:42
# Fork: 1 of 3
# Warmup Iteration   1: 1388.401 ops/ms
# Warmup Iteration   2: 1481.953 ops/ms
# Warmup Iteration   3: 1461.967 ops/ms
# Warmup Iteration   4: 1445.903 ops/ms
# Warmup Iteration   5: 1450.703 ops/ms
Iteration   1: 1452.107 ops/ms
Iteration   2: 1456.752 ops/ms
Iteration   3: 1452.053 ops/ms
Iteration   4: 1452.521 ops/ms
Iteration   5: 1439.419 ops/ms

# Run progress: 33.33% complete, ETA 00:05:31
# Fork: 2 of 3
# Warmup Iteration   1: 1462.286 ops/ms
# Warmup Iteration   2: 1561.249 ops/ms
# Warmup Iteration   3: 1574.645 ops/ms
# Warmup Iteration   4: 1560.895 ops/ms
# Warmup Iteration   5: 1543.907 ops/ms
Iteration   1: 1538.455 ops/ms
Iteration   2: 1516.535 ops/ms
Iteration   3: 1523.992 ops/ms
Iteration   4: 1522.303 ops/ms
Iteration   5: 1513.576 ops/ms

# Run progress: 35.42% complete, ETA 00:05:21
# Fork: 3 of 3
# Warmup Iteration   1: 1385.490 ops/ms
# Warmup Iteration   2: 1482.054 ops/ms
# Warmup Iteration   3: 1486.936 ops/ms
# Warmup Iteration   4: 1515.690 ops/ms
# Warmup Iteration   5: 1492.820 ops/ms
Iteration   1: 1519.897 ops/ms
Iteration   2: 1519.808 ops/ms
Iteration   3: 1491.143 ops/ms
Iteration   4: 1513.133 ops/ms
Iteration   5: 1520.307 ops/ms


Result "com.github.marschall.getrandom.benchmarks.SecureRandomBenchmark.nextBytes16":
  1495.467 ±(99.9%) 36.746 ops/ms [Average]
  (min, avg, max) = (1439.419, 1495.467, 1538.455), stdev = 34.372
  CI (99.9%): [1458.721, 1532.213] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_152, VM 25.152-b16
# VM invoker: /home/marschall/bin/java/jdk1.8.0_152/jre/bin/java
# VM options: -XX:+UseParallelGC -Xmx32g -Xms32g -Djava.security.properties=src/main/resources/jvm.java8.security -Djava.library.path=/home/marschall/git/getrandom-provider/getrandom-provider-benchmarks/target
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.getrandom.benchmarks.SecureRandomBenchmark.nextBytes256
# Parameters: (algorithm = geturandom)

# Run progress: 37.50% complete, ETA 00:05:10
# Fork: 1 of 3
# Warmup Iteration   1: 412.337 ops/ms
# Warmup Iteration   2: 411.707 ops/ms
# Warmup Iteration   3: 410.290 ops/ms
# Warmup Iteration   4: 409.861 ops/ms
# Warmup Iteration   5: 409.686 ops/ms
Iteration   1: 408.855 ops/ms
Iteration   2: 410.429 ops/ms
Iteration   3: 408.996 ops/ms
Iteration   4: 410.054 ops/ms
Iteration   5: 409.752 ops/ms

# Run progress: 39.58% complete, ETA 00:05:00
# Fork: 2 of 3
# Warmup Iteration   1: 411.768 ops/ms
# Warmup Iteration   2: 411.780 ops/ms
# Warmup Iteration   3: 409.804 ops/ms
# Warmup Iteration   4: 409.608 ops/ms
# Warmup Iteration   5: 408.814 ops/ms
Iteration   1: 408.806 ops/ms
Iteration   2: 409.912 ops/ms
Iteration   3: 409.136 ops/ms
Iteration   4: 408.325 ops/ms
Iteration   5: 409.550 ops/ms

# Run progress: 41.67% complete, ETA 00:04:50
# Fork: 3 of 3
# Warmup Iteration   1: 411.052 ops/ms
# Warmup Iteration   2: 411.534 ops/ms
# Warmup Iteration   3: 408.138 ops/ms
# Warmup Iteration   4: 407.173 ops/ms
# Warmup Iteration   5: 408.289 ops/ms
Iteration   1: 408.169 ops/ms
Iteration   2: 407.941 ops/ms
Iteration   3: 408.285 ops/ms
Iteration   4: 408.599 ops/ms
Iteration   5: 408.163 ops/ms


Result "com.github.marschall.getrandom.benchmarks.SecureRandomBenchmark.nextBytes256":
  408.998 ±(99.9%) 0.836 ops/ms [Average]
  (min, avg, max) = (407.941, 408.998, 410.429), stdev = 0.782
  CI (99.9%): [408.162, 409.835] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_152, VM 25.152-b16
# VM invoker: /home/marschall/bin/java/jdk1.8.0_152/jre/bin/java
# VM options: -XX:+UseParallelGC -Xmx32g -Xms32g -Djava.security.properties=src/main/resources/jvm.java8.security -Djava.library.path=/home/marschall/git/getrandom-provider/getrandom-provider-benchmarks/target
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.getrandom.benchmarks.SecureRandomBenchmark.nextBytes256
# Parameters: (algorithm = NativePRNGNonBlocking)

# Run progress: 43.75% complete, ETA 00:04:39
# Fork: 1 of 3
# Warmup Iteration   1: 131.781 ops/ms
# Warmup Iteration   2: 133.965 ops/ms
# Warmup Iteration   3: 133.109 ops/ms
# Warmup Iteration   4: 132.014 ops/ms
# Warmup Iteration   5: 131.644 ops/ms
Iteration   1: 132.262 ops/ms
Iteration   2: 132.629 ops/ms
Iteration   3: 131.894 ops/ms
Iteration   4: 132.563 ops/ms
Iteration   5: 132.820 ops/ms

# Run progress: 45.83% complete, ETA 00:04:29
# Fork: 2 of 3
# Warmup Iteration   1: 128.059 ops/ms
# Warmup Iteration   2: 132.441 ops/ms
# Warmup Iteration   3: 133.208 ops/ms
# Warmup Iteration   4: 133.178 ops/ms
# Warmup Iteration   5: 132.528 ops/ms
Iteration   1: 133.103 ops/ms
Iteration   2: 132.841 ops/ms
Iteration   3: 133.129 ops/ms
Iteration   4: 132.088 ops/ms
Iteration   5: 132.378 ops/ms

# Run progress: 47.92% complete, ETA 00:04:19
# Fork: 3 of 3
# Warmup Iteration   1: 130.066 ops/ms
# Warmup Iteration   2: 133.371 ops/ms
# Warmup Iteration   3: 131.263 ops/ms
# Warmup Iteration   4: 131.790 ops/ms
# Warmup Iteration   5: 131.441 ops/ms
Iteration   1: 132.111 ops/ms
Iteration   2: 132.851 ops/ms
Iteration   3: 132.119 ops/ms
Iteration   4: 132.538 ops/ms
Iteration   5: 131.847 ops/ms


Result "com.github.marschall.getrandom.benchmarks.SecureRandomBenchmark.nextBytes256":
  132.478 ±(99.9%) 0.447 ops/ms [Average]
  (min, avg, max) = (131.847, 132.478, 133.129), stdev = 0.418
  CI (99.9%): [132.031, 132.925] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_152, VM 25.152-b16
# VM invoker: /home/marschall/bin/java/jdk1.8.0_152/jre/bin/java
# VM options: -XX:+UseParallelGC -Xmx32g -Xms32g -Djava.security.properties=src/main/resources/jvm.java8.security -Djava.library.path=/home/marschall/git/getrandom-provider/getrandom-provider-benchmarks/target
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.getrandom.benchmarks.SecureRandomBenchmark.nextBytes32
# Parameters: (algorithm = geturandom)

# Run progress: 50.00% complete, ETA 00:04:08
# Fork: 1 of 3
# Warmup Iteration   1: 1626.044 ops/ms
# Warmup Iteration   2: 1630.798 ops/ms
# Warmup Iteration   3: 1628.522 ops/ms
# Warmup Iteration   4: 1625.486 ops/ms
# Warmup Iteration   5: 1624.453 ops/ms
Iteration   1: 1628.667 ops/ms
Iteration   2: 1626.968 ops/ms
Iteration   3: 1627.039 ops/ms
Iteration   4: 1627.361 ops/ms
Iteration   5: 1620.961 ops/ms

# Run progress: 52.08% complete, ETA 00:03:58
# Fork: 2 of 3
# Warmup Iteration   1: 1627.711 ops/ms
# Warmup Iteration   2: 1635.037 ops/ms
# Warmup Iteration   3: 1633.252 ops/ms
# Warmup Iteration   4: 1627.893 ops/ms
# Warmup Iteration   5: 1635.837 ops/ms
Iteration   1: 1618.966 ops/ms
Iteration   2: 1627.197 ops/ms
Iteration   3: 1621.479 ops/ms
Iteration   4: 1624.222 ops/ms
Iteration   5: 1621.357 ops/ms

# Run progress: 54.17% complete, ETA 00:03:47
# Fork: 3 of 3
# Warmup Iteration   1: 1638.143 ops/ms
# Warmup Iteration   2: 1630.448 ops/ms
# Warmup Iteration   3: 1625.283 ops/ms
# Warmup Iteration   4: 1627.083 ops/ms
# Warmup Iteration   5: 1619.442 ops/ms
Iteration   1: 1628.781 ops/ms
Iteration   2: 1628.879 ops/ms
Iteration   3: 1621.549 ops/ms
Iteration   4: 1628.803 ops/ms
Iteration   5: 1628.614 ops/ms


Result "com.github.marschall.getrandom.benchmarks.SecureRandomBenchmark.nextBytes32":
  1625.390 ±(99.9%) 3.805 ops/ms [Average]
  (min, avg, max) = (1618.966, 1625.390, 1628.879), stdev = 3.559
  CI (99.9%): [1621.584, 1629.195] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_152, VM 25.152-b16
# VM invoker: /home/marschall/bin/java/jdk1.8.0_152/jre/bin/java
# VM options: -XX:+UseParallelGC -Xmx32g -Xms32g -Djava.security.properties=src/main/resources/jvm.java8.security -Djava.library.path=/home/marschall/git/getrandom-provider/getrandom-provider-benchmarks/target
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.getrandom.benchmarks.SecureRandomBenchmark.nextBytes32
# Parameters: (algorithm = NativePRNGNonBlocking)

# Run progress: 56.25% complete, ETA 00:03:37
# Fork: 1 of 3
# Warmup Iteration   1: 841.657 ops/ms
# Warmup Iteration   2: 890.533 ops/ms
# Warmup Iteration   3: 891.805 ops/ms
# Warmup Iteration   4: 891.557 ops/ms
# Warmup Iteration   5: 889.792 ops/ms
Iteration   1: 891.382 ops/ms
Iteration   2: 892.008 ops/ms
Iteration   3: 892.709 ops/ms
Iteration   4: 892.490 ops/ms
Iteration   5: 891.976 ops/ms

# Run progress: 58.33% complete, ETA 00:03:27
# Fork: 2 of 3
# Warmup Iteration   1: 833.089 ops/ms
# Warmup Iteration   2: 883.325 ops/ms
# Warmup Iteration   3: 885.183 ops/ms
# Warmup Iteration   4: 876.423 ops/ms
# Warmup Iteration   5: 876.049 ops/ms
Iteration   1: 875.670 ops/ms
Iteration   2: 877.398 ops/ms
Iteration   3: 875.605 ops/ms
Iteration   4: 877.789 ops/ms
Iteration   5: 877.782 ops/ms

# Run progress: 60.42% complete, ETA 00:03:16
# Fork: 3 of 3
# Warmup Iteration   1: 835.883 ops/ms
# Warmup Iteration   2: 882.967 ops/ms
# Warmup Iteration   3: 889.461 ops/ms
# Warmup Iteration   4: 890.454 ops/ms
# Warmup Iteration   5: 890.593 ops/ms
Iteration   1: 890.519 ops/ms
Iteration   2: 890.255 ops/ms
Iteration   3: 888.151 ops/ms
Iteration   4: 890.692 ops/ms
Iteration   5: 891.007 ops/ms


Result "com.github.marschall.getrandom.benchmarks.SecureRandomBenchmark.nextBytes32":
  886.362 ±(99.9%) 7.559 ops/ms [Average]
  (min, avg, max) = (875.605, 886.362, 892.709), stdev = 7.071
  CI (99.9%): [878.803, 893.921] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_152, VM 25.152-b16
# VM invoker: /home/marschall/bin/java/jdk1.8.0_152/jre/bin/java
# VM options: -XX:+UseParallelGC -Xmx32g -Xms32g -Djava.security.properties=src/main/resources/jvm.java8.security -Djava.library.path=/home/marschall/git/getrandom-provider/getrandom-provider-benchmarks/target
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.getrandom.benchmarks.SecureRandomBenchmark.nextBytes64
# Parameters: (algorithm = geturandom)

# Run progress: 62.50% complete, ETA 00:03:06
# Fork: 1 of 3
# Warmup Iteration   1: 945.064 ops/ms
# Warmup Iteration   2: 947.507 ops/ms
# Warmup Iteration   3: 944.024 ops/ms
# Warmup Iteration   4: 940.835 ops/ms
# Warmup Iteration   5: 945.491 ops/ms
Iteration   1: 946.575 ops/ms
Iteration   2: 942.539 ops/ms
Iteration   3: 941.707 ops/ms
Iteration   4: 945.570 ops/ms
Iteration   5: 941.512 ops/ms

# Run progress: 64.58% complete, ETA 00:02:56
# Fork: 2 of 3
# Warmup Iteration   1: 946.105 ops/ms
# Warmup Iteration   2: 943.814 ops/ms
# Warmup Iteration   3: 940.018 ops/ms
# Warmup Iteration   4: 941.984 ops/ms
# Warmup Iteration   5: 944.380 ops/ms
Iteration   1: 941.095 ops/ms
Iteration   2: 946.508 ops/ms
Iteration   3: 940.727 ops/ms
Iteration   4: 942.407 ops/ms
Iteration   5: 942.197 ops/ms

# Run progress: 66.67% complete, ETA 00:02:45
# Fork: 3 of 3
# Warmup Iteration   1: 940.994 ops/ms
# Warmup Iteration   2: 944.968 ops/ms
# Warmup Iteration   3: 945.889 ops/ms
# Warmup Iteration   4: 940.046 ops/ms
# Warmup Iteration   5: 943.271 ops/ms
Iteration   1: 939.457 ops/ms
Iteration   2: 941.692 ops/ms
Iteration   3: 943.550 ops/ms
Iteration   4: 945.674 ops/ms
Iteration   5: 943.288 ops/ms


Result "com.github.marschall.getrandom.benchmarks.SecureRandomBenchmark.nextBytes64":
  942.966 ±(99.9%) 2.345 ops/ms [Average]
  (min, avg, max) = (939.457, 942.966, 946.575), stdev = 2.194
  CI (99.9%): [940.621, 945.311] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_152, VM 25.152-b16
# VM invoker: /home/marschall/bin/java/jdk1.8.0_152/jre/bin/java
# VM options: -XX:+UseParallelGC -Xmx32g -Xms32g -Djava.security.properties=src/main/resources/jvm.java8.security -Djava.library.path=/home/marschall/git/getrandom-provider/getrandom-provider-benchmarks/target
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.getrandom.benchmarks.SecureRandomBenchmark.nextBytes64
# Parameters: (algorithm = NativePRNGNonBlocking)

# Run progress: 68.75% complete, ETA 00:02:35
# Fork: 1 of 3
# Warmup Iteration   1: 472.193 ops/ms
# Warmup Iteration   2: 489.359 ops/ms
# Warmup Iteration   3: 486.475 ops/ms
# Warmup Iteration   4: 486.800 ops/ms
# Warmup Iteration   5: 486.929 ops/ms
Iteration   1: 485.981 ops/ms
Iteration   2: 486.231 ops/ms
Iteration   3: 486.708 ops/ms
Iteration   4: 486.353 ops/ms
Iteration   5: 487.628 ops/ms

# Run progress: 70.83% complete, ETA 00:02:24
# Fork: 2 of 3
# Warmup Iteration   1: 473.579 ops/ms
# Warmup Iteration   2: 487.789 ops/ms
# Warmup Iteration   3: 484.926 ops/ms
# Warmup Iteration   4: 484.747 ops/ms
# Warmup Iteration   5: 485.214 ops/ms
Iteration   1: 483.863 ops/ms
Iteration   2: 484.044 ops/ms
Iteration   3: 485.325 ops/ms
Iteration   4: 484.362 ops/ms
Iteration   5: 484.740 ops/ms

# Run progress: 72.92% complete, ETA 00:02:14
# Fork: 3 of 3
# Warmup Iteration   1: 470.407 ops/ms
# Warmup Iteration   2: 483.881 ops/ms
# Warmup Iteration   3: 481.716 ops/ms
# Warmup Iteration   4: 480.820 ops/ms
# Warmup Iteration   5: 480.982 ops/ms
Iteration   1: 480.865 ops/ms
Iteration   2: 480.871 ops/ms
Iteration   3: 481.195 ops/ms
Iteration   4: 480.118 ops/ms
Iteration   5: 480.787 ops/ms


Result "com.github.marschall.getrandom.benchmarks.SecureRandomBenchmark.nextBytes64":
  483.938 ±(99.9%) 2.714 ops/ms [Average]
  (min, avg, max) = (480.118, 483.938, 487.628), stdev = 2.539
  CI (99.9%): [481.224, 486.652] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_152, VM 25.152-b16
# VM invoker: /home/marschall/bin/java/jdk1.8.0_152/jre/bin/java
# VM options: -XX:+UseParallelGC -Xmx32g -Xms32g -Djava.security.properties=src/main/resources/jvm.java8.security -Djava.library.path=/home/marschall/git/getrandom-provider/getrandom-provider-benchmarks/target
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.getrandom.benchmarks.SecureRandomBenchmark.nextInt
# Parameters: (algorithm = geturandom)

# Run progress: 75.00% complete, ETA 00:02:04
# Fork: 1 of 3
# Warmup Iteration   1: 1590.726 ops/ms
# Warmup Iteration   2: 1595.395 ops/ms
# Warmup Iteration   3: 1593.233 ops/ms
# Warmup Iteration   4: 1589.368 ops/ms
# Warmup Iteration   5: 1588.475 ops/ms
Iteration   1: 1591.788 ops/ms
Iteration   2: 1588.119 ops/ms
Iteration   3: 1588.519 ops/ms
Iteration   4: 1592.991 ops/ms
Iteration   5: 1587.946 ops/ms

# Run progress: 77.08% complete, ETA 00:01:53
# Fork: 2 of 3
# Warmup Iteration   1: 1593.240 ops/ms
# Warmup Iteration   2: 1592.944 ops/ms
# Warmup Iteration   3: 1592.188 ops/ms
# Warmup Iteration   4: 1593.608 ops/ms
# Warmup Iteration   5: 1594.574 ops/ms
Iteration   1: 1593.160 ops/ms
Iteration   2: 1590.392 ops/ms
Iteration   3: 1597.168 ops/ms
Iteration   4: 1594.645 ops/ms
Iteration   5: 1589.887 ops/ms

# Run progress: 79.17% complete, ETA 00:01:43
# Fork: 3 of 3
# Warmup Iteration   1: 1590.994 ops/ms
# Warmup Iteration   2: 1592.212 ops/ms
# Warmup Iteration   3: 1590.539 ops/ms
# Warmup Iteration   4: 1594.687 ops/ms
# Warmup Iteration   5: 1590.112 ops/ms
Iteration   1: 1593.393 ops/ms
Iteration   2: 1593.112 ops/ms
Iteration   3: 1588.101 ops/ms
Iteration   4: 1589.283 ops/ms
Iteration   5: 1590.334 ops/ms


Result "com.github.marschall.getrandom.benchmarks.SecureRandomBenchmark.nextInt":
  1591.256 ±(99.9%) 2.955 ops/ms [Average]
  (min, avg, max) = (1587.946, 1591.256, 1597.168), stdev = 2.764
  CI (99.9%): [1588.301, 1594.211] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_152, VM 25.152-b16
# VM invoker: /home/marschall/bin/java/jdk1.8.0_152/jre/bin/java
# VM options: -XX:+UseParallelGC -Xmx32g -Xms32g -Djava.security.properties=src/main/resources/jvm.java8.security -Djava.library.path=/home/marschall/git/getrandom-provider/getrandom-provider-benchmarks/target
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.getrandom.benchmarks.SecureRandomBenchmark.nextInt
# Parameters: (algorithm = NativePRNGNonBlocking)

# Run progress: 81.25% complete, ETA 00:01:33
# Fork: 1 of 3
# Warmup Iteration   1: 2704.085 ops/ms
# Warmup Iteration   2: 2861.801 ops/ms
# Warmup Iteration   3: 2879.326 ops/ms
# Warmup Iteration   4: 2882.257 ops/ms
# Warmup Iteration   5: 2892.412 ops/ms
Iteration   1: 2896.589 ops/ms
Iteration   2: 2939.555 ops/ms
Iteration   3: 2948.062 ops/ms
Iteration   4: 2959.036 ops/ms
Iteration   5: 2955.917 ops/ms

# Run progress: 83.33% complete, ETA 00:01:22
# Fork: 2 of 3
# Warmup Iteration   1: 2775.740 ops/ms
# Warmup Iteration   2: 2910.389 ops/ms
# Warmup Iteration   3: 2931.957 ops/ms
# Warmup Iteration   4: 2943.247 ops/ms
# Warmup Iteration   5: 2942.836 ops/ms
Iteration   1: 2955.001 ops/ms
Iteration   2: 2976.167 ops/ms
Iteration   3: 2972.647 ops/ms
Iteration   4: 2977.099 ops/ms
Iteration   5: 2973.370 ops/ms

# Run progress: 85.42% complete, ETA 00:01:12
# Fork: 3 of 3
# Warmup Iteration   1: 2768.600 ops/ms
# Warmup Iteration   2: 2889.662 ops/ms
# Warmup Iteration   3: 2899.613 ops/ms
# Warmup Iteration   4: 2907.581 ops/ms
# Warmup Iteration   5: 2898.472 ops/ms
Iteration   1: 2911.858 ops/ms
Iteration   2: 2911.680 ops/ms
Iteration   3: 2910.650 ops/ms
Iteration   4: 2913.961 ops/ms
Iteration   5: 2834.462 ops/ms


Result "com.github.marschall.getrandom.benchmarks.SecureRandomBenchmark.nextInt":
  2935.737 ±(99.9%) 42.044 ops/ms [Average]
  (min, avg, max) = (2834.462, 2935.737, 2977.099), stdev = 39.328
  CI (99.9%): [2893.693, 2977.781] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_152, VM 25.152-b16
# VM invoker: /home/marschall/bin/java/jdk1.8.0_152/jre/bin/java
# VM options: -XX:+UseParallelGC -Xmx32g -Xms32g -Djava.security.properties=src/main/resources/jvm.java8.security -Djava.library.path=/home/marschall/git/getrandom-provider/getrandom-provider-benchmarks/target
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.getrandom.benchmarks.SecureRandomBenchmark.nextLong
# Parameters: (algorithm = geturandom)

# Run progress: 87.50% complete, ETA 00:01:02
# Fork: 1 of 3
# Warmup Iteration   1: 796.792 ops/ms
# Warmup Iteration   2: 797.186 ops/ms
# Warmup Iteration   3: 797.620 ops/ms
# Warmup Iteration   4: 796.522 ops/ms
# Warmup Iteration   5: 795.400 ops/ms
Iteration   1: 797.637 ops/ms
Iteration   2: 795.897 ops/ms
Iteration   3: 796.616 ops/ms
Iteration   4: 796.474 ops/ms
Iteration   5: 795.169 ops/ms

# Run progress: 89.58% complete, ETA 00:00:51
# Fork: 2 of 3
# Warmup Iteration   1: 798.266 ops/ms
# Warmup Iteration   2: 796.593 ops/ms
# Warmup Iteration   3: 798.482 ops/ms
# Warmup Iteration   4: 796.450 ops/ms
# Warmup Iteration   5: 797.795 ops/ms
Iteration   1: 797.647 ops/ms
Iteration   2: 795.473 ops/ms
Iteration   3: 797.636 ops/ms
Iteration   4: 798.028 ops/ms
Iteration   5: 798.193 ops/ms

# Run progress: 91.67% complete, ETA 00:00:41
# Fork: 3 of 3
# Warmup Iteration   1: 798.559 ops/ms
# Warmup Iteration   2: 796.809 ops/ms
# Warmup Iteration   3: 797.345 ops/ms
# Warmup Iteration   4: 799.316 ops/ms
# Warmup Iteration   5: 798.478 ops/ms
Iteration   1: 798.757 ops/ms
Iteration   2: 796.257 ops/ms
Iteration   3: 797.631 ops/ms
Iteration   4: 797.091 ops/ms
Iteration   5: 797.424 ops/ms


Result "com.github.marschall.getrandom.benchmarks.SecureRandomBenchmark.nextLong":
  797.062 ±(99.9%) 1.114 ops/ms [Average]
  (min, avg, max) = (795.169, 797.062, 798.757), stdev = 1.042
  CI (99.9%): [795.948, 798.176] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_152, VM 25.152-b16
# VM invoker: /home/marschall/bin/java/jdk1.8.0_152/jre/bin/java
# VM options: -XX:+UseParallelGC -Xmx32g -Xms32g -Djava.security.properties=src/main/resources/jvm.java8.security -Djava.library.path=/home/marschall/git/getrandom-provider/getrandom-provider-benchmarks/target
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.getrandom.benchmarks.SecureRandomBenchmark.nextLong
# Parameters: (algorithm = NativePRNGNonBlocking)

# Run progress: 93.75% complete, ETA 00:00:31
# Fork: 1 of 3
# Warmup Iteration   1: 1370.739 ops/ms
# Warmup Iteration   2: 1450.714 ops/ms
# Warmup Iteration   3: 1466.518 ops/ms
# Warmup Iteration   4: 1478.221 ops/ms
# Warmup Iteration   5: 1511.588 ops/ms
Iteration   1: 1512.122 ops/ms
Iteration   2: 1527.479 ops/ms
Iteration   3: 1523.326 ops/ms
Iteration   4: 1519.082 ops/ms
Iteration   5: 1521.123 ops/ms

# Run progress: 95.83% complete, ETA 00:00:20
# Fork: 2 of 3
# Warmup Iteration   1: 1367.534 ops/ms
# Warmup Iteration   2: 1426.370 ops/ms
# Warmup Iteration   3: 1443.828 ops/ms
# Warmup Iteration   4: 1464.649 ops/ms
# Warmup Iteration   5: 1462.531 ops/ms
Iteration   1: 1479.145 ops/ms
Iteration   2: 1478.994 ops/ms
Iteration   3: 1482.810 ops/ms
Iteration   4: 1491.922 ops/ms
Iteration   5: 1485.936 ops/ms

# Run progress: 97.92% complete, ETA 00:00:10
# Fork: 3 of 3
# Warmup Iteration   1: 1368.124 ops/ms
# Warmup Iteration   2: 1429.599 ops/ms
# Warmup Iteration   3: 1459.959 ops/ms
# Warmup Iteration   4: 1464.018 ops/ms
# Warmup Iteration   5: 1472.068 ops/ms
Iteration   1: 1477.002 ops/ms
Iteration   2: 1492.425 ops/ms
Iteration   3: 1498.691 ops/ms
Iteration   4: 1497.419 ops/ms
Iteration   5: 1493.009 ops/ms


Result "com.github.marschall.getrandom.benchmarks.SecureRandomBenchmark.nextLong":
  1498.699 ±(99.9%) 18.756 ops/ms [Average]
  (min, avg, max) = (1477.002, 1498.699, 1527.479), stdev = 17.544
  CI (99.9%): [1479.943, 1517.455] (assumes normal distribution)


# Run complete. Total time: 00:08:16

Benchmark                                     (algorithm)   Mode  Cnt     Score    Error   Units
SecureRandomBenchmark.nextBoolean              geturandom  thrpt   15  1593.070 ±  8.304  ops/ms
SecureRandomBenchmark.nextBoolean   NativePRNGNonBlocking  thrpt   15  3707.812 ± 56.061  ops/ms
SecureRandomBenchmark.nextBytes128             geturandom  thrpt   15   656.822 ±  0.668  ops/ms
SecureRandomBenchmark.nextBytes128  NativePRNGNonBlocking  thrpt   15   252.985 ±  1.017  ops/ms
SecureRandomBenchmark.nextBytes16              geturandom  thrpt   15  1629.870 ±  5.027  ops/ms
SecureRandomBenchmark.nextBytes16   NativePRNGNonBlocking  thrpt   15  1495.467 ± 36.746  ops/ms
SecureRandomBenchmark.nextBytes256             geturandom  thrpt   15   408.998 ±  0.836  ops/ms
SecureRandomBenchmark.nextBytes256  NativePRNGNonBlocking  thrpt   15   132.478 ±  0.447  ops/ms
SecureRandomBenchmark.nextBytes32              geturandom  thrpt   15  1625.390 ±  3.805  ops/ms
SecureRandomBenchmark.nextBytes32   NativePRNGNonBlocking  thrpt   15   886.362 ±  7.559  ops/ms
SecureRandomBenchmark.nextBytes64              geturandom  thrpt   15   942.966 ±  2.345  ops/ms
SecureRandomBenchmark.nextBytes64   NativePRNGNonBlocking  thrpt   15   483.938 ±  2.714  ops/ms
SecureRandomBenchmark.nextInt                  geturandom  thrpt   15  1591.256 ±  2.955  ops/ms
SecureRandomBenchmark.nextInt       NativePRNGNonBlocking  thrpt   15  2935.737 ± 42.044  ops/ms
SecureRandomBenchmark.nextLong                 geturandom  thrpt   15   797.062 ±  1.114  ops/ms
SecureRandomBenchmark.nextLong      NativePRNGNonBlocking  thrpt   15  1498.699 ± 18.756  ops/ms

Benchmark result is saved to jmh-result.text
